pipeline {
    agent none

    environment {
        IMAGE_NAME = 'joel1906/my-php-webapp'
        IMAGE_TAG = 'latest'
        FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        DEPLOY_PORT = '8081'
    }

    stages {
        stage('Checkout') {
            agent { label 'master' }
            steps {
                echo "üîÑ Cloning repository on master..."
                cleanWs()
                checkout scm
            }
        }

        stage('Provision Docker on Test Server') {
            agent { label 'master' }
            steps {
                echo "‚öôÔ∏è Running Ansible to install Docker on the test server..."
                sh 'ansible-playbook config/ansible_play_book.yml'
            }
        }

        stage('Build Docker Image on Test Server') {
            agent { label 'test-node' }
            steps {
                script {
                    try {
                        echo "üõ†Ô∏è Building Docker image on test (slave) node..."
                        sh "docker build -t $FULL_IMAGE -f Dockerfile ."
                    } catch (e) {
                        cleanupContainer()
                        error "Build Docker Image stage failed!"
                    }
                }
            }
        }

        stage('Run Tests in Docker') {
            agent { label 'test-node' }
            steps {
                script {
                    try {
                        echo "üß™ Running PHP app test script inside Docker container..."
                        sh """
                            docker run --rm \
                            -v \$PWD/website/test:/tests \
                            $FULL_IMAGE /bin/bash /tests/test-index.sh
                        """
                    } catch (e) {
                        cleanupContainer()
                        error "Run Tests in Docker stage failed!"
                    }
                }
            }
        }

        stage('Docker Login & Push to Docker Hub') {
            agent { label 'test-node' }
            steps {
                script {
                    try {
                        echo "üîê Logging into Docker Hub and pushing image..."
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                docker push $FULL_IMAGE
                            '''
                        }
                    } catch (e) {
                        cleanupContainer()
                        error "Docker Login & Push stage failed!"
                    }
                }
            }
        }

        stage('Deploy to Production (Master Node)') {
            agent { label 'master' }
            steps {
                script {
                    try {
                        echo "üöÄ Pulling and deploying image on Jenkins master (production)..."
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                docker pull $FULL_IMAGE
                                docker rm -f my-php-app || true
                                docker run -d --name my-php-app -p ${DEPLOY_PORT}:80 $FULL_IMAGE
                            '''
                        }

                        // Fetch public IP with clean output
                        def publicIp = sh (
                            script: '''
                                ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null)
                                if [ -z "$ip" ]; then
                                  ip=$(curl -s https://checkip.amazonaws.com)
                                fi
                                if [ -z "$ip" ]; then
                                  ip=$(hostname -I | awk '{print $1}')
                                fi
                                echo $ip
                            ''',
                            returnStdout: true
                        ).trim()

                        env.PUBLIC_IP = publicIp
                        echo "‚úÖ Deployment complete. App is running at: http://${publicIp}:${DEPLOY_PORT}/"
                    } catch (e) {
                        cleanupContainer()
                        error "Deploy to Production stage failed!"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "‚úÖ Pipeline completed successfully. App deployed at: http://${env.PUBLIC_IP}:${DEPLOY_PORT}/"
            }
        }
        failure {
            echo "‚ùå Pipeline failed. Cleaning up running container..."
            cleanupContainer()
        }
    }
}

def cleanupContainer() {
    echo "üßπ Cleaning up running container (my-php-app) if exists..."
    sh "docker rm -f my-php-app || true"
}
