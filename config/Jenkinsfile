pipeline {
    agent none

    environment {
        DOCKER_IMAGE = 'my-php-webapp:latest'
        DEPLOY_PORT = '8081'
    }

    stages {
        stage('Checkout') {
            agent { label 'master' }
            steps {
                echo "üîÑ Cloning repository on master..."
                cleanWs()
                checkout scm
            }
        }

        stage('Provision Docker on Test Server') {
            agent { label 'master' }
            steps {
                echo "‚öôÔ∏è Running Ansible to install Docker on the test server..."
                sh 'ansible-playbook config/ansible_play_book.yml'
            }
        }

        stage('Build Docker Image on Test Server') {
            agent { label 'test-node' }
            steps {
                echo "üõ†Ô∏è Building Docker image on test (slave) node..."
                sh "docker build -t $DOCKER_IMAGE -f Dockerfile ."
            }
        }

        stage('Run Tests in Docker') {
            agent { label 'test-node' }
            steps {
                echo "üß™ Running PHP app test script inside Docker container..."
                sh """
                    docker run --rm \
                      -v \$PWD/website/test:/tests \
                      $DOCKER_IMAGE /bin/bash /tests/test-index.sh
                """
            }
        }

        stage('Deploy to Production (Jenkins Test Node)') {
            agent { label 'test-node' }
            steps {
                echo "üöÄ Deploying container on test node (acting as production)..."
                sh "PORT=$DEPLOY_PORT IMAGE=$DOCKER_IMAGE bash config/deploy.sh"
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully. App deployed on port $DEPLOY_PORT."
        }
        failure {
            echo "‚ùå Pipeline failed. No deployment performed."
        }
    }
}
