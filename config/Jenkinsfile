pipeline {
    agent none

    environment {
        IMAGE_NAME = 'joel1906/my-php-webapp'
        IMAGE_TAG = 'latest'
        FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
        DEPLOY_PORT = '8081'
    }

    stages {
        stage('Checkout') {
            agent { label 'master' }
            steps {
                echo "üîÑ Cloning repository on master..."
                cleanWs()
                checkout scm
            }
        }

        stage('Provision Docker on Test Server') {
            agent { label 'master' }
            steps {
                echo "‚öôÔ∏è Running Ansible to install Docker on the test server..."
                sh 'ansible-playbook config/ansible_play_book.yml'
            }
        }

        stage('Build Docker Image on Test Server') {
            agent { label 'test-node' }
            steps {
                echo "üõ†Ô∏è Building Docker image on test (slave) node..."
                sh "docker build -t $FULL_IMAGE -f Dockerfile ."
            }
        }

        stage('Run Tests in Docker') {
            agent { label 'test-node' }
            steps {
                echo "üß™ Running PHP app test script inside Docker container..."
                sh """
                    docker run --rm \
                      -v \$PWD/website/test:/tests \
                      $FULL_IMAGE /bin/bash /tests/test-index.sh
                """
            }
        }

        stage('Docker Login & Push to Docker Hub') {
            agent { label 'test-node' }
            steps {
                echo "üîê Logging into Docker Hub and pushing image..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $FULL_IMAGE
                    '''
                }
            }
        }

        stage('Deploy to Production (Master Node)') {
            agent { label 'master' }
            steps {
                echo "üöÄ Pulling and deploying image on Jenkins master (production)..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker pull $FULL_IMAGE
                            docker rm -f my-php-app || true
                            docker run -d --name my-php-app -p ${DEPLOY_PORT}:80 $FULL_IMAGE
                        '''
                        
                        echo "Fetching public IP for deployment URL..."
                        def publicIp = sh (
                            script: '''
                                # Try AWS metadata service
                                ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null)
                                if [ -z "$ip" ]; then
                                  echo "AWS metadata IP not found, trying external IP service..."
                                  ip=$(curl -s https://checkip.amazonaws.com)
                                fi
                                if [ -z "$ip" ]; then
                                  echo "External IP service failed, using hostname IP as fallback..."
                                  ip=$(hostname -I | awk '{print $1}')
                                fi
                                echo $ip
                            ''',
                            returnStdout: true
                        ).trim()
                        echo "Detected public IP: ${publicIp}"
                        env.PUBLIC_IP = publicIp
                        echo "‚úÖ Deployment complete. App is running at: http://${publicIp}:${DEPLOY_PORT}/"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "‚úÖ Pipeline completed successfully. App deployed at: http://${env.PUBLIC_IP}:${DEPLOY_PORT}/"
            }
        }
        failure {
            echo "‚ùå Pipeline failed. No deployment performed."
        }
    }
}
